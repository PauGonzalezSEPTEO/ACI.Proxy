<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Access token is required" xml:space="preserve">
    <value>Access token is required</value>
  </data>
  <data name="Company is required" xml:space="preserve">
    <value>Company is required</value>
  </data>
  <data name="Confirmation password is required" xml:space="preserve">
    <value>Confirmation password is required</value>
  </data>
  <data name="Confirmation password should have at least 6 characters" xml:space="preserve">
    <value>Confirmation password should have at least 6 characters</value>
  </data>
  <data name="Confirmation password should have maximum 100 characters" xml:space="preserve">
    <value>Confirmation password should have maximum 100 characters</value>
  </data>
  <data name="Current password is required" xml:space="preserve">
    <value>Current password is required</value>
  </data>
  <data name="Current password should have at least 6 characters" xml:space="preserve">
    <value>Current password should have at least 6 characters</value>
  </data>
  <data name="Current password should have maximum 100 characters" xml:space="preserve">
    <value>Current password should have maximum 100 characters</value>
  </data>
  <data name="Email is required" xml:space="preserve">
    <value>Email is required</value>
  </data>
  <data name="Email should have at least 3 characters" xml:space="preserve">
    <value>Email should have at least 3 characters</value>
  </data>
  <data name="Email should have maximum 256 characters" xml:space="preserve">
    <value>Email should have maximum 256 characters</value>
  </data>
  <data name="Email token is required" xml:space="preserve">
    <value>Email token is required</value>
  </data>
  <data name="Firstname is required" xml:space="preserve">
    <value>Firstname is required</value>
  </data>
  <data name="Firstname should have at least 2 characters" xml:space="preserve">
    <value>Firstname should have at least 2 characters</value>
  </data>
  <data name="Firstname should have maximum 256 characters" xml:space="preserve">
    <value>Firstname should have maximum 256 characters</value>
  </data>
  <data name="Id is required" xml:space="preserve">
    <value>Identifier is required</value>
  </data>
  <data name="Language code is required" xml:space="preserve">
    <value>Language code is required</value>
  </data>
  <data name="Language code should have maximum 10 characters" xml:space="preserve">
    <value>Language code should have maximum 10 characters</value>
  </data>
  <data name="Lastname is required" xml:space="preserve">
    <value>Lastname is required</value>
  </data>
  <data name="Lastname should have at least 2 characters" xml:space="preserve">
    <value>Lastname should have at least 2 characters</value>
  </data>
  <data name="Lastname should have maximum 256 characters1" xml:space="preserve">
    <value>Lastname should have maximum 256 characters</value>
  </data>
  <data name="Name is required" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="Name should have at least 4 characters" xml:space="preserve">
    <value>Name should have at least 4 characters</value>
  </data>
  <data name="Name should have between 4 and 256 characters" xml:space="preserve">
    <value>Name should have between 4 and 256 characters</value>
  </data>
  <data name="Name should have maximum 256 characters" xml:space="preserve">
    <value>Name should have maximum 256 characters</value>
  </data>
  <data name="New confirmation password is required" xml:space="preserve">
    <value>New confirmation password is required</value>
  </data>
  <data name="New confirmation password should have at least 6 characters" xml:space="preserve">
    <value>New confirmation password should have at least 6 characters</value>
  </data>
  <data name="New confirmation password should have maximum 100 characters" xml:space="preserve">
    <value>New confirmation password should have maximum 100 characters</value>
  </data>
  <data name="New password is required" xml:space="preserve">
    <value>New password is required</value>
  </data>
  <data name="New password should have at least 6 characters" xml:space="preserve">
    <value>New password should have at least 6 characters</value>
  </data>
  <data name="New password should have maximum 100 characters" xml:space="preserve">
    <value>New password should have maximum 100 characters</value>
  </data>
  <data name="Password is required" xml:space="preserve">
    <value>Password is required</value>
  </data>
  <data name="Password should have at least 6 characters" xml:space="preserve">
    <value>Password should have at least 6 characters</value>
  </data>
  <data name="Password should have maximum 100 characters" xml:space="preserve">
    <value>Password should have maximum 100 characters</value>
  </data>
  <data name="Password token is required" xml:space="preserve">
    <value>Password token is required</value>
  </data>
  <data name="Provider is required" xml:space="preserve">
    <value>Provider is required</value>
  </data>
  <data name="Refresh token is required" xml:space="preserve">
    <value>Refresh token is required</value>
  </data>
  <data name="Roles should have at least one element" xml:space="preserve">
    <value>Roles should have at least one element</value>
  </data>
  <data name="Short description should have maximum 500 characters" xml:space="preserve">
    <value>Short description should have maximum 500 characters</value>
  </data>
  <data name="The password and confirmation password do not match" xml:space="preserve">
    <value>The password and confirmation password do not match</value>
  </data>
  <data name="Token is required" xml:space="preserve">
    <value>Token is required</value>
  </data>
  <data name="User name is required" xml:space="preserve">
    <value>User name is required</value>
  </data>
  <data name="User name should have at least 2 characters" xml:space="preserve">
    <value>User name should have at least 2 characters</value>
  </data>
  <data name="User name should have maximum 256 characters" xml:space="preserve">
    <value>User name should have maximum 256 characters</value>
  </data>
</root>